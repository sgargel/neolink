# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: macOS-latest

steps:
- script: |
    rustup toolchain uninstall stable || true
    rustup toolchain install nightly
    cargo install xargo
    rustup override set nightly
  displayName: 'install xargo'

- script: |
    rustup target add arm-unknown-linux-gnueabihf
    brew tap messense/macos-cross-toolchains && brew install arm-unknown-linux-gnueabihf
  displayName: 'Add rustup target and linker'

- script: |
    curl -L 'https://gstreamer.freedesktop.org/data/pkg/osx/1.20.4/gstreamer-1.0-devel-1.20.4-universal.pkg' -o "$(pwd)/gstreamer-devel.pkg"
    sudo installer -verbose -pkg "$(pwd)/gstreamer-devel.pkg" -target /
    PKG_CONFIG_PATH="/Library/Frameworks/GStreamer.framework/Versions/1.0/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/lib:${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
    PKG_CONFIG_GSTREAMER_1_0_PREFIX="/Library/Frameworks/GStreamer.framework/Versions/1.0"
    echo "##vso[task.setvariable variable=PKG_CONFIG_PATH]${PKG_CONFIG_PATH}"
    echo "##vso[task.setvariable variable=PKG_CONFIG_GSTREAMER_1_0_PREFIX]${PKG_CONFIG_GSTREAMER_1_0_PREFIX}"
    echo "##vso[task.setvariable variable=PKG_CONFIG_PATH]${PKG_CONFIG_PATH}"
    brew install pkg-config
  displayName: 'Install Gstreamer on macOS'

- script: |
    echo "PATH=${PATH}"
    echo "GSTREAMER_1_0_ROOT_MSVC_X86_64=${GSTREAMER_1_0_ROOT_MSVC_X86_64}"
    echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}"
    pkg-config --libs --cflags gstreamer-base-sys || true
    pkg-config --libs --cflags glib-sys || true
    find / -name gstreamer-base-sys.pc 2> /dev/null
    find / -name glib-sys.pc 2> /dev/null
  displayName: 'debug pkg-config'

- script: |
    echo "PATH=${PATH}"
    echo "GSTREAMER_1_0_ROOT_MSVC_X86_64=${GSTREAMER_1_0_ROOT_MSVC_X86_64}"
    echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}"
    rustup component add rust-src
    xargo build -Z build-std --target arm-unknown-linux-gnueabihf
  displayName: 'cargo cross build'
